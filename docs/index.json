{
  "api/StreamExtended.ClientHelloInfo.html": {
    "href": "api/StreamExtended.ClientHelloInfo.html",
    "title": "Class ClientHelloInfo | Stream Extended",
    "keywords": "Class ClientHelloInfo Wraps up the client SSL hello information. Inheritance Object ClientHelloInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended Assembly : StreamExtended.dll Syntax public class ClientHelloInfo Properties Ciphers Declaration public int[] Ciphers { get; set; } Property Value Type Description Int32 [] CompressionData Declaration public byte[] CompressionData { get; set; } Property Value Type Description Byte [] Extensions Declaration public Dictionary<string, SslExtension> Extensions { get; set; } Property Value Type Description Dictionary < String , SslExtension > HandshakeVersion Declaration public int HandshakeVersion { get; set; } Property Value Type Description Int32 MajorVersion Declaration public int MajorVersion { get; set; } Property Value Type Description Int32 MinorVersion Declaration public int MinorVersion { get; set; } Property Value Type Description Int32 Random Declaration public byte[] Random { get; set; } Property Value Type Description Byte [] SessionId Declaration public byte[] SessionId { get; set; } Property Value Type Description Byte [] Time Declaration public DateTime Time { get; } Property Value Type Description DateTime Methods ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Object.ToString()"
  },
  "api/StreamExtended.DefaultBufferPool.html": {
    "href": "api/StreamExtended.DefaultBufferPool.html",
    "title": "Class DefaultBufferPool | Stream Extended",
    "keywords": "Class DefaultBufferPool A concrete IBufferPool implementation using a thread-safe stack. Works well when all consumers ask for buffers with the same size. If your application would use variable size buffers consider implementing IBufferPool using System.Buffers library from Microsoft. Inheritance Object DefaultBufferPool Implements IBufferPool IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended Assembly : StreamExtended.dll Syntax public class DefaultBufferPool : IBufferPool, IDisposable Methods Dispose() Declaration public void Dispose() GetBuffer(Int32) Gets a buffer. Declaration public byte[] GetBuffer(int bufferSize) Parameters Type Name Description Int32 bufferSize Size of the buffer. Returns Type Description Byte [] ReturnBuffer(Byte[]) Returns the buffer. Declaration public void ReturnBuffer(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Implements IBufferPool System.IDisposable"
  },
  "api/StreamExtended.html": {
    "href": "api/StreamExtended.html",
    "title": "Namespace StreamExtended | Stream Extended",
    "keywords": "Namespace StreamExtended Classes ClientHelloInfo Wraps up the client SSL hello information. DefaultBufferPool A concrete IBufferPool implementation using a thread-safe stack. Works well when all consumers ask for buffers with the same size. If your application would use variable size buffers consider implementing IBufferPool using System.Buffers library from Microsoft. ServerHelloInfo Wraps up the server SSL hello information. SslTools Use this class to peek SSL client/server hello information. Interfaces IBufferPool Use this interface to implement custom buffer pool. To use the default buffer pool implementation use DefaultBufferPool class."
  },
  "api/StreamExtended.IBufferPool.html": {
    "href": "api/StreamExtended.IBufferPool.html",
    "title": "Interface IBufferPool | Stream Extended",
    "keywords": "Interface IBufferPool Use this interface to implement custom buffer pool. To use the default buffer pool implementation use DefaultBufferPool class. Inherited Members IDisposable.Dispose() Namespace : StreamExtended Assembly : StreamExtended.dll Syntax public interface IBufferPool : IDisposable Methods GetBuffer(Int32) Declaration byte[] GetBuffer(int bufferSize) Parameters Type Name Description Int32 bufferSize Returns Type Description Byte [] ReturnBuffer(Byte[]) Declaration void ReturnBuffer(byte[] buffer) Parameters Type Name Description Byte [] buffer"
  },
  "api/StreamExtended.Models.html": {
    "href": "api/StreamExtended.Models.html",
    "title": "Namespace StreamExtended.Models | Stream Extended",
    "keywords": "Namespace StreamExtended.Models Classes SslExtension The SSL extension information."
  },
  "api/StreamExtended.Models.SslExtension.html": {
    "href": "api/StreamExtended.Models.SslExtension.html",
    "title": "Class SslExtension | Stream Extended",
    "keywords": "Class SslExtension The SSL extension information. Inheritance Object SslExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended.Models Assembly : StreamExtended.dll Syntax public class SslExtension Constructors SslExtension(Int32, String, String, Int32) Initializes a new instance of the SslExtension class. Declaration public SslExtension(int value, string name, string data, int position) Parameters Type Name Description Int32 value The value. String name The name. String data The data. Int32 position The position. Properties Data Gets the data. Declaration public string Data { get; } Property Value Type Description String The data. Name Gets the name. Declaration public string Name { get; } Property Value Type Description String The name. Position Gets the position. Declaration public int Position { get; } Property Value Type Description Int32 The position. Value Gets the value. Declaration public int Value { get; } Property Value Type Description Int32 The value."
  },
  "api/StreamExtended.Network.CopyStream.html": {
    "href": "api/StreamExtended.Network.CopyStream.html",
    "title": "Class CopyStream | Stream Extended",
    "keywords": "Class CopyStream Copies the source stream to destination stream. But this let users to peek and read the copying process. Inheritance Object CopyStream Implements ICustomStreamReader IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended.Network Assembly : StreamExtended.dll Syntax public class CopyStream : ICustomStreamReader, IDisposable Constructors CopyStream(ICustomStreamReader, ICustomStreamWriter, IBufferPool, Int32) Declaration public CopyStream(ICustomStreamReader reader, ICustomStreamWriter writer, IBufferPool bufferPool, int bufferSize) Parameters Type Name Description ICustomStreamReader reader ICustomStreamWriter writer IBufferPool bufferPool Int32 bufferSize Properties Available Declaration public int Available { get; } Property Value Type Description Int32 BufferSize Declaration public int BufferSize { get; } Property Value Type Description Int32 DataAvailable Declaration public bool DataAvailable { get; } Property Value Type Description Boolean ReadBytes Declaration public long ReadBytes { get; } Property Value Type Description Int64 Methods Dispose() Declaration public void Dispose() FillBufferAsync(CancellationToken) Declaration public Task<bool> FillBufferAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Boolean > Flush() Declaration public void Flush() FlushAsync(CancellationToken) Declaration public Task FlushAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task PeekByteAsync(Int32, CancellationToken) Declaration public Task<int> PeekByteAsync(int index, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 index CancellationToken cancellationToken Returns Type Description Task < Int32 > PeekByteFromBuffer(Int32) Declaration public byte PeekByteFromBuffer(int index) Parameters Type Name Description Int32 index Returns Type Description Byte PeekBytesAsync(Int32, Int32, CancellationToken) Declaration public Task<byte[]> PeekBytesAsync(int index, int size, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 index Int32 size CancellationToken cancellationToken Returns Type Description Task < Byte []> Read(Byte[], Int32, Int32) Declaration public int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count CancellationToken cancellationToken Returns Type Description Task < Int32 > ReadByteFromBuffer() Declaration public byte ReadByteFromBuffer() Returns Type Description Byte ReadLineAsync(CancellationToken) Declaration public Task<string> ReadLineAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < String > Implements ICustomStreamReader System.IDisposable"
  },
  "api/StreamExtended.Network.CustomBufferedStream.html": {
    "href": "api/StreamExtended.Network.CustomBufferedStream.html",
    "title": "Class CustomBufferedStream | Stream Extended",
    "keywords": "Class CustomBufferedStream A custom network stream inherited from stream with an underlying read buffer supporting both read/write of UTF-8 encoded string or raw bytes asynchronously from last read position. Inheritance Object MarshalByRefObject Stream CustomBufferedStream Implements IDisposable ICustomStreamReader Inherited Members Stream.Null Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, Int32) Stream.CopyTo(Stream) Stream.CopyTo(Stream, Int32) Stream.Close() Stream.Dispose() Stream.FlushAsync() Stream.CreateWaitHandle() Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) Stream.EndRead(IAsyncResult) Stream.ReadAsync(Byte[], Int32, Int32) Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) Stream.EndWrite(IAsyncResult) Stream.WriteAsync(Byte[], Int32, Int32) Stream.Synchronized(Stream) Stream.ObjectInvariant() MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended.Network Assembly : StreamExtended.dll Syntax public class CustomBufferedStream : Stream, IDisposable, ICustomStreamReader Constructors CustomBufferedStream(Stream, IBufferPool, Int32, Boolean) Initializes a new instance of the CustomBufferedStream class. Declaration public CustomBufferedStream(Stream baseStream, IBufferPool bufferPool, int bufferSize, bool leaveOpen = false) Parameters Type Name Description Stream baseStream The base stream. IBufferPool bufferPool Bufferpool. Int32 bufferSize Size of the buffer. Boolean leaveOpen true to leave the stream open after disposing the CustomBufferedStream object; otherwise, false . Properties Available Gets the available data size. Declaration public int Available { get; } Property Value Type Description Int32 BufferSize Declaration public int BufferSize { get; } Property Value Type Description Int32 CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override bool CanTimeout { get; } Property Value Type Description Boolean Overrides Stream.CanTimeout CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite DataAvailable Gets a value indicating whether data is available. Declaration public bool DataAvailable { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position ReadTimeout Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override int ReadTimeout { get; set; } Property Value Type Description Int32 Overrides Stream.ReadTimeout WriteTimeout Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override int WriteTimeout { get; set; } Property Value Type Description Int32 Overrides Stream.WriteTimeout Methods CopyToAsync(Stream, Int32, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. Int32 bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None . Returns Type Description Task A task that represents the asynchronous copy operation. Overrides Stream.CopyToAsync(Stream, Int32, CancellationToken) Dispose(Boolean) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(Boolean) FillBuffer() Fills the buffer. Declaration public bool FillBuffer() Returns Type Description Boolean FillBufferAsync(CancellationToken) Fills the buffer asynchronous. Declaration public Task<bool> FillBufferAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Boolean > Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None . Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) OnDataRead(Byte[], Int32, Int32) Declaration protected virtual void OnDataRead(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count OnDataWrite(Byte[], Int32, Int32) Declaration protected virtual void OnDataWrite(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count PeekByteAsync(Int32, CancellationToken) Peeks a byte asynchronous. Declaration public Task<int> PeekByteAsync(int index, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 index The index. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Int32 > PeekByteFromBuffer(Int32) Peeks a byte from buffer. Declaration public byte PeekByteFromBuffer(int index) Parameters Type Name Description Int32 index The index. Returns Type Description Byte Exceptions Type Condition Exception Index is out of buffer size PeekBytesAsync(Int32, Int32, CancellationToken) Peeks bytes asynchronous. Declaration public Task<byte[]> PeekBytesAsync(int index, int size, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 index The index. Int32 size CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Byte []> Read(Byte[], Int32, Int32) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset + count - 1) replaced by the bytes read from the current source. Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of bytes to be read from the current stream. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(Byte[], Int32, Int32) ReadAndIgnoreAllLinesAsync(CancellationToken) Read until the last new line, ignores the result Declaration public Task ReadAndIgnoreAllLinesAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task ReadAsync(Byte[], Int32, Int32, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Byte [] buffer The buffer to write the data into. Int32 offset The byte offset in buffer at which to begin writing data from the stream. Int32 count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None . Returns Type Description Task < Int32 > A task that represents the asynchronous read operation. The value of the parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Overrides Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken) ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description Int32 The unsigned byte cast to an Int32, or -1 if at the end of the stream. Overrides Stream.ReadByte() ReadByteFromBuffer() Reads a byte from buffer. Declaration public byte ReadByteFromBuffer() Returns Type Description Byte Exceptions Type Condition Exception Buffer is empty ReadLineAsync(CancellationToken) Read a line from the byte stream Declaration public Task<string> ReadLineAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < String > Seek(Int64, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description Int64 The new position within the current stream. Overrides Stream.Seek(Int64, SeekOrigin) SetLength(Int64) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value The desired length of the current stream in bytes. Overrides Stream.SetLength(Int64) Write(Byte[], Int32, Int32) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. This method copies count bytes from buffer to the current stream. Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. Int32 count The number of bytes to be written to the current stream. Overrides Stream.Write(Byte[], Int32, Int32) WriteAsync(Byte[], Int32, Int32, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Byte [] buffer The buffer to write data from. Int32 offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. Int32 count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None . Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken) WriteByte(Byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description Byte value The byte to write to the stream. Overrides Stream.WriteByte(Byte) Events DataRead Declaration public event EventHandler<DataEventArgs> DataRead Event Type Type Description EventHandler < DataEventArgs > DataWrite Declaration public event EventHandler<DataEventArgs> DataWrite Event Type Type Description EventHandler < DataEventArgs > Implements System.IDisposable ICustomStreamReader See Also Stream"
  },
  "api/StreamExtended.Network.DataEventArgs.html": {
    "href": "api/StreamExtended.Network.DataEventArgs.html",
    "title": "Class DataEventArgs | Stream Extended",
    "keywords": "Class DataEventArgs Wraps the data sent/received event argument. Inheritance Object EventArgs DataEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended.Network Assembly : StreamExtended.dll Syntax public class DataEventArgs : EventArgs Constructors DataEventArgs(Byte[], Int32, Int32) Declaration public DataEventArgs(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Properties Buffer The buffer with data. Declaration public byte[] Buffer { get; } Property Value Type Description Byte [] Count Length from offset in buffer with valid data. Declaration public int Count { get; } Property Value Type Description Int32 Offset Offset in buffer from which valid data begins. Declaration public int Offset { get; } Property Value Type Description Int32"
  },
  "api/StreamExtended.Network.html": {
    "href": "api/StreamExtended.Network.html",
    "title": "Namespace StreamExtended.Network | Stream Extended",
    "keywords": "Namespace StreamExtended.Network Classes CopyStream Copies the source stream to destination stream. But this let users to peek and read the copying process. CustomBufferedStream A custom network stream inherited from stream with an underlying read buffer supporting both read/write of UTF-8 encoded string or raw bytes asynchronously from last read position. DataEventArgs Wraps the data sent/received event argument. Interfaces ICustomStreamReader This concrete implemetation of interface acts as the source stream for CopyStream class. ICustomStreamWriter A concrete implementation of this interface is required when calling CopyStream."
  },
  "api/StreamExtended.Network.ICustomStreamReader.html": {
    "href": "api/StreamExtended.Network.ICustomStreamReader.html",
    "title": "Interface ICustomStreamReader | Stream Extended",
    "keywords": "Interface ICustomStreamReader This concrete implemetation of interface acts as the source stream for CopyStream class. Namespace : StreamExtended.Network Assembly : StreamExtended.dll Syntax public interface ICustomStreamReader Properties Available Declaration int Available { get; } Property Value Type Description Int32 BufferSize Declaration int BufferSize { get; } Property Value Type Description Int32 DataAvailable Declaration bool DataAvailable { get; } Property Value Type Description Boolean Methods FillBufferAsync(CancellationToken) Fills the buffer asynchronous. Declaration Task<bool> FillBufferAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Boolean > PeekByteAsync(Int32, CancellationToken) Peeks a byte asynchronous. Declaration Task<int> PeekByteAsync(int index, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 index The index. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Int32 > PeekByteFromBuffer(Int32) Peeks a byte from buffer. Declaration byte PeekByteFromBuffer(int index) Parameters Type Name Description Int32 index The index. Returns Type Description Byte Exceptions Type Condition Exception Index is out of buffer size PeekBytesAsync(Int32, Int32, CancellationToken) Peeks bytes asynchronous. Declaration Task<byte[]> PeekBytesAsync(int index, int size, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 index The index. Int32 size CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Byte []> Read(Byte[], Int32, Int32) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset + count - 1) replaced by the bytes read from the current source. Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of bytes to be read from the current stream. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. ReadAsync(Byte[], Int32, Int32, CancellationToken) Read the specified number (or less) of raw bytes from the base stream to the given buffer to the specified offset Declaration Task<int> ReadAsync(byte[] buffer, int offset, int bytesToRead, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Byte [] buffer Int32 offset Int32 bytesToRead CancellationToken cancellationToken Returns Type Description Task < Int32 > The number of bytes read ReadByteFromBuffer() Declaration byte ReadByteFromBuffer() Returns Type Description Byte ReadLineAsync(CancellationToken) Read a line from the byte stream Declaration Task<string> ReadLineAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < String >"
  },
  "api/StreamExtended.Network.ICustomStreamWriter.html": {
    "href": "api/StreamExtended.Network.ICustomStreamWriter.html",
    "title": "Interface ICustomStreamWriter | Stream Extended",
    "keywords": "Interface ICustomStreamWriter A concrete implementation of this interface is required when calling CopyStream. Namespace : StreamExtended.Network Assembly : StreamExtended.dll Syntax public interface ICustomStreamWriter Methods Write(Byte[], Int32, Int32) Declaration void Write(byte[] buffer, int i, int bufferLength) Parameters Type Name Description Byte [] buffer Int32 i Int32 bufferLength WriteAsync(Byte[], Int32, Int32, CancellationToken) Declaration Task WriteAsync(byte[] buffer, int i, int bufferLength, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer Int32 i Int32 bufferLength CancellationToken cancellationToken Returns Type Description Task"
  },
  "api/StreamExtended.ServerHelloInfo.html": {
    "href": "api/StreamExtended.ServerHelloInfo.html",
    "title": "Class ServerHelloInfo | Stream Extended",
    "keywords": "Class ServerHelloInfo Wraps up the server SSL hello information. Inheritance Object ServerHelloInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended Assembly : StreamExtended.dll Syntax public class ServerHelloInfo Properties CipherSuite Declaration public int CipherSuite { get; set; } Property Value Type Description Int32 CompressionMethod Declaration public byte CompressionMethod { get; set; } Property Value Type Description Byte Extensions Declaration public Dictionary<string, SslExtension> Extensions { get; set; } Property Value Type Description Dictionary < String , SslExtension > HandshakeVersion Declaration public int HandshakeVersion { get; set; } Property Value Type Description Int32 MajorVersion Declaration public int MajorVersion { get; set; } Property Value Type Description Int32 MinorVersion Declaration public int MinorVersion { get; set; } Property Value Type Description Int32 Random Declaration public byte[] Random { get; set; } Property Value Type Description Byte [] SessionId Declaration public byte[] SessionId { get; set; } Property Value Type Description Byte [] Time Declaration public DateTime Time { get; } Property Value Type Description DateTime Methods ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Object.ToString()"
  },
  "api/StreamExtended.SslTools.html": {
    "href": "api/StreamExtended.SslTools.html",
    "title": "Class SslTools | Stream Extended",
    "keywords": "Class SslTools Use this class to peek SSL client/server hello information. Inheritance Object SslTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : StreamExtended Assembly : StreamExtended.dll Syntax public class SslTools Methods IsClientHello(CustomBufferedStream, IBufferPool, CancellationToken) Is the given stream starts with an SSL client hello? Declaration public static Task<bool> IsClientHello(CustomBufferedStream stream, IBufferPool bufferPool, CancellationToken cancellationToken) Parameters Type Name Description CustomBufferedStream stream IBufferPool bufferPool CancellationToken cancellationToken Returns Type Description Task < Boolean > IsServerHello(CustomBufferedStream, IBufferPool, CancellationToken) Is the given stream starts with an SSL client hello? Declaration public static Task<bool> IsServerHello(CustomBufferedStream stream, IBufferPool bufferPool, CancellationToken cancellationToken) Parameters Type Name Description CustomBufferedStream stream IBufferPool bufferPool CancellationToken cancellationToken Returns Type Description Task < Boolean > PeekClientHello(CustomBufferedStream, IBufferPool, CancellationToken) Peek the SSL client hello information. Declaration public static Task<ClientHelloInfo> PeekClientHello(CustomBufferedStream clientStream, IBufferPool bufferPool, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CustomBufferedStream clientStream IBufferPool bufferPool CancellationToken cancellationToken Returns Type Description Task < ClientHelloInfo > PeekServerHello(CustomBufferedStream, IBufferPool, CancellationToken) Peek the SSL client hello information. Declaration public static Task<ServerHelloInfo> PeekServerHello(CustomBufferedStream serverStream, IBufferPool bufferPool, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CustomBufferedStream serverStream IBufferPool bufferPool CancellationToken cancellationToken Returns Type Description Task < ServerHelloInfo >"
  }
}
